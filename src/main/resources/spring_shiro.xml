<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"
	default-lazy-init="true">

	<description>Shiro安全配置 来源于： http://shiro.apache.org/spring.html
	</description>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="ShiroRealmImpl" />
		<property name="cacheManager" ref="shiroEhcacheManager" />
	</bean>

	<!-- Define the realm you want to use to connect to your back-end security 
		datasource: -->
	<bean id="ShiroRealmImpl" class="me.leep.wf.services.system.impl.ShiroRealmImpl" />

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="login.action" /> <!-- 没有权限或者失败后跳转的页面 -->
		<property name="successUrl" value="index.action" />
		<property name="filterChainDefinitions">
			<!-- , roles[admin], perms[document:read] -->
			<value> 
				<!--
				/login = anon
				/user/** = authc
				/role/edit/* = perms[role:edit]
				/role/save = perms [role:edit]
				/role/list = perms [role:view]
				/** = authc 
				-->
			</value>
		</property>
	</bean>

	<!-- 用户授权/认证信息Cache, 采用EhCache 缓存 -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" />
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />


	<!-- AOP式方法级权限检查 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>